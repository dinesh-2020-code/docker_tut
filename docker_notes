Docker: Docker is a container technology. A tool for creating and managing containers.

Container: A standardized unit of software
        -> A package of code and dependencies to run that code (e.g., NodeJS code + NodeJS runtime)
        -> The same container always yields the exact same application and execution behaviour! No matter where or by whom it might be executed.
Containers: Packages that contains application or the env to run the code. (running unit of software)
            -> running instances of images

Images: Templates/blueprints for Containers
    -> sharable 
    -> Contains code + required tools/runtime

    -> For ex: NodeJS App Code + NodeJS Environment

Finding / Creating Images

    We need an image!
        -> Use an existing, pre-built image -> head to dockerhub for pre-built images

RUN command: will be used while building the image

CMD command: executed when container is started based on the image

    -> If you don't specify a CMD, the CMD of the base image will be executed. With no base image and no CMD you'd get an error

------------------------------------------------------------------------------------------------
Running a container based on our image: 
    docker build . -> build image based on docker file. '.' here signifies that the Dockerfile is in the same directory from where the commands been executing.
    docker build . -> build image based on docker file. '.' here signifies that the Dockerfile is in the same directory from where the commands been executing.
    run the image: docker run -p <port to be listened on>:<port on which internal code is listening> <image-id>
                ->e.g; docker run -p 3000:80 b1e878fbfb16e9e7a2cb34dc4e207b045eb71a26b5f35eadb47b664418e8c70e
    stop the docker container: docker stop <container-name>. You can find the container-name by running "docker ps" command

    
    Images are read-only 

    Images are layers-based, means that when we build an image, docker caches the  every instruction result and when you rebuild the image, it will use the cached results, if there is no need to run the instruction again. This is known  as layer based architecture. Every instruction represents the layers in dockerfile. Moreover, images are read-only which means once instruction has been executed, the images lock in, the code in that can't change, unless you re-build the image which technically means that u build the new image.

    When u run the container, it adds the final layer(running layer or container layer) on the top of all the layers which is basically the result of the executing commands specified in dockerFile.

    -> When one layer changes, all subsequent layers will be re-executed.


    Summary
        Images and Containers

            Image -> Code + environment
                    -> Template and blueprint for containers
                    
            Containers -> Extra layer on top of image
                        -> running application

Managing Images and Containers

    -> Add --help to  see all options with the docker commands

----------------------------------------------------------------------------------------
                        Stopping and Restarting Containers
----------------------------------------------------------------------------------------

docker --help : get list of docker main commands
Run 'docker COMMAND --help' to see more information on command

docker ps -a: Show all containers

To restart the stopped container: 
docker run -> create new container and start the container in foreground
docker start <container-id or name>: to restart the container, but not able to interact with it, which means it won't be blocking the command prompt anymore! (i.e., container is running in background)

docker run -p 8000:30 -d 44a14cb40c075b55c707605652b659e608556b8fa65114ce4d2ad33756df3d4b : running the container in detached mode (non interactive mode)
docker attach <name-of-container> :run container in attached mode

docker logs <container-name>: Fetch the logs of a container.
Attaching container again: docker logs -f angry_robinson (running the container in attach mode)

docker run -it <image-id>: Run the container in interactive mode and pops up the terminal to enter the input required.

--------------------------------------------------------------------------------------------------------------------------------
        Deleting Images and Containers
--------------------------------------------------------------------------------------------------------------------------------

docker images: List all the images
docker rmi <image-id>: Remove the image iff it is not being used by any stopped/running containers
docker rmi <image-id1> <image-id2> <img-id3> ... <img-idn>: To remove 'n' images at once

--rm flag in docker run command: automatically removes the container when it exits
    for ex: docker run -p 3000:80 -d --rm <image-id>
    If I stop the container by running 'docker stop <container-id>', it will remove the container as well.

-> To know more about docker image, type the following command : docker image inspect <image-id>

------------------------------------------------------------------------------------------------
    Copying files Into & From a Container
------------------------------------------------------------------------------------------------

docker cp command allows to copy files into a running container or out from a running container
    SYNTAX: docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH
    Ex: docker cp dummy/. boring_vaughan:/test ('dummy' and 'boring_vaughan' are container names)


------------------------------------------------------------------------------------------------
    Naming & Tagging Containers and Images
------------------------------------------------------------------------------------------------

